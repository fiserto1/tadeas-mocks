<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f905d9ee-cf2a-45b7-ae95-1a7c81e12749" activeEnvironment="Default" name="REST BE TADEAS" resourceRoot="" soapui-version="5.4.0-EB" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="9e78a5aa-d7b9-41c9-82f5-b37cbef461ba" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Login" path="/api/user/login/" id="ada6cf96-b944-46a4-85cb-237ebdf35ae8"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>password</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Login" id="d2d3c096-3969-474d-813a-0b1b2dc36442" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/api/user/login">log:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:log="http://localhost/api/user/login">log:Fault</con:element></con:representation><con:request name="Success" id="18b31adb-8121-4954-be15-3a54ce18db8b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/api/user/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="hashadmin"/>
  <con:entry key="username" value="tomas"/>
</con:parameters><con:parameterOrder><con:entry>username</con:entry><con:entry>password</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="b1f32e46-4e61-4046-9fc8-73c941602fa0" port="8000" path="/api" host="localhost" name="TADEAS BE - REST MockService" docroot=""><con:description>Mocks the BE of upload system Tadeas</con:description><con:settings/><con:properties/><con:restMockAction name="/user/login?username={username}&amp;password={hash}" method="GET" resourcePath="/user/login" id="8624f31d-43bf-4b59-8ad4-6fa6d68d9328"><con:settings/><con:defaultResponse>Success - Student</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
// Match based on path
def requestPath = mockRequest.getPath()
//log.info "Path: "+ requestPath

// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
//log.info "QueryString: " + queryString

def params = queryString.split('&amp;')
log.info "Split: " + params

//grab username
def username = params[0].split('=')[1]
log.info "Username: " + username

//grab password
def password = params[1].split('=')[1]
log.info "Password: " + password

if (username.equals("student") &amp;&amp; password.equals("cd73502828457d15655bbd7a63fb0bc8") ) { //psw: student
	log.info "Success - Correct credentials"
	return "Success - Student"
} else if (username.equals("teacher") &amp;&amp; password.equals("8d788385431273d11e8b43bb78f3aa41")) { //psw: teacher
	log.info "Success - Correct credentials"
	return "Success - Teacher"
} else {
	log.info "Error - invalid credentials"
	return "Forbidden"
}
</con:dispatchPath><con:response name="Success - Student" id="f454a4d9-2d1a-4e87-ab4a-2aeadf6ec459" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"id": 1,
"userName": "student",
"firstName": "Chuck",
"lastName": "Norris",
"email": "student@test.com",
"role": "Student",
"groups": [{"id":1, "name":"g1"}, {"id":2, "name":"g2"}],
"sessionId": "0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="Forbidden" id="7ee2c478-9d1e-443d-882c-f33f11da1a25" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{
"status": "ERROR",
"message": "INVALID_CREDENTIALS"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="Success - Teacher" id="04533e9a-5474-4ce2-a718-6f4c12f80a74" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"id": 2,
"userName": "teacher",
"firstName": "Albert",
"lastName": "Einstein",
"email": "teacher@test.com",
"role": "Teacher",
"sessionId": "121555e8-ff98-4dcc-a1ad-e7f06e674192"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/group" method="GET" resourcePath="/group" id="5773211a-f149-4e9b-8bae-2c1487c1a4b4"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

return "Success"
</con:dispatchPath><con:response name="Success" id="51c3a2a9-3acb-4842-850a-836ba716385f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
{"id":1, "name":"g1"},
{"id":2, "name":"g2"},
{"id":3, "name":"g3"},
{"id":4, "name":"g4"}
]</con:responseContent></con:response><con:response name="Forbidden" id="5ed75d8f-6ed3-4de2-8996-4b6a2270e825" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status":"ERROR",
"message":"NOT AUTHENTICATED"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/group/{id}" method="GET" resourcePath="/group/" id="3b146d69-79dc-47d9-9234-e2d5d9e616de"><con:settings/><con:defaultResponse>Bad Request</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath


def id = requestPath.split('/')[3]
log.info "Id: " + id


if (id.equals("1")) {
	return "group1"
} else if (id.equals("2")) {
	return "group2"
} else {
	return "Bad Request"
}
</con:dispatchPath><con:response name="group1" id="e57099f1-e562-44e1-b448-679ff5e18a3f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"name":"g1"}</con:responseContent></con:response><con:response name="group2" id="f259c1e1-44d1-4d9f-8b0e-9b8e47f81251" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"name":"g2"}</con:responseContent></con:response><con:response name="Bad Request" id="369bf598-513b-4b5d-8d61-32106ba918f7" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{"status":"ERROR",
"message":"BAD_REQUEST"}</con:responseContent></con:response><con:response name="Forbidden" id="40339f2f-89ed-4f06-a193-3db7c5547f15" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status":"ERROR",
"message":"NOT AUTHENTICATED"}</con:responseContent><con:header><con:name>WWW-Authenticate</con:name><con:value>Token</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/role" method="GET" resourcePath="/role" id="06a389d4-6c36-4be8-b403-429b0c63a01c"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

return "Success"
</con:dispatchPath><con:response name="Success" id="b170ad22-194d-4043-b362-b7c43150d6f8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
{"id":1, "name":"Student"},
{"id":2, "name":"Teacher"}
]</con:responseContent></con:response><con:response name="Forbidden" id="d26d93db-4771-468b-9964-d00a61f0404f" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status":"ERROR",
"message":"NOT AUTHENTICATED"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/role/{id}" method="GET" resourcePath="/role/" id="69146ce1-143c-4826-bf47-d4b3e42b59e4"><con:settings/><con:defaultResponse>Bad Request</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath



def id = requestPath.split('/')[3]
log.info "Id: " + id

if (id.equals("1")) {
	return "role1"
} else if (id.equals("2")) {
	return "role2"
} else {
	return "Bad Request"
}

</con:dispatchPath><con:response name="Bad Request" id="e9b8d0ae-8980-495a-9ea0-46a456b95f9b" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response><con:response name="role1" id="b7aa079d-0d68-4260-9604-9fbd3b1d4279" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id": 1,
"name": "Student"}</con:responseContent></con:response><con:response name="role2" id="7a50d61d-cb3e-4300-baf3-3082f511fe9b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id": 2,
"name": "Teacher"}</con:responseContent></con:response><con:response name="Forbidden" id="818f1ad9-cec3-4278-9786-5b13963b0161" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent><con:header><con:name>WWW-Authenticate</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/task/{id}" method="GET" resourcePath="/task/" id="61445e1a-03b1-4496-be3f-74c79c1426bd"><con:settings/><con:defaultResponse>Bad Request</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath



def id = requestPath.split('/')[3]
log.info "Id: " + id

if (id.equals("1")) {
	return "task1"
} else if (id.equals("2")) {
	return "task2"
} else if (id.equals("3")) {
	return "task3"
}else {
	return "Bad Request"
}

</con:dispatchPath><con:response name="task1" id="330b987e-c756-4e00-82fe-22c91c7d1baa" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"id":1,
"name": "Task1",
"issuer": 2,
"active":true,
"issueDate": "2017-01-12",
"definition": "Task definition"
}</con:responseContent></con:response><con:response name="task2" id="178b4ef3-f37e-48bd-9f84-23aee810f5c8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"id":2,
"name": "Task2",
"issuer": 2,
"issueDate": "2017-02-12",
"active":false,
"definition": "Task definition"
}</con:responseContent></con:response><con:response name="task3" id="9815e42a-6d24-4b16-97e1-189eeba68d58" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"id":3,
"name": "Task3",
"issuer": 2,
"issueDate": "2017-03-12",
"active":true,
"definition": "Task definition"
}</con:responseContent></con:response><con:response name="Forbidden" id="f5e5b70b-d558-4d50-ad23-cd6466643d6a" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Bad Request" id="5521ba70-3281-41d1-80ea-b8438e1cf975" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/window" method="GET" resourcePath="/window" id="8ad5cb71-154f-465d-8383-c45e36c50177"><con:settings/><con:defaultResponse>Forbidden</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}


if (accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3")){
	return "Success - Student"
} else if (accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192")){
	return "Success - Teacher"
}

</con:dispatchPath><con:response name="Forbidden" id="4fe5420f-fda8-4eb4-b18f-280ffa89585e" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Success - Student" id="8fe9049a-b6c4-47a4-a75a-32d28c06a164" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
{
	"id":1,
	"task": {
		"id":1,
		"name": "Task1",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-01-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow1",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-01-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
},
{
	"id":2,
	"task": {
		"id":2,
		"name": "Task2",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-02-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow2",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-02-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
}
]</con:responseContent></con:response><con:response name="Bad Request" id="7fd720cc-e88a-4906-9ab3-02a854a8d074" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response><con:response name="Success - Teacher" id="5875cd70-7e5e-4e31-8252-daa7a78674d9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{
	"id":2,
	"task": {
		"id":2,
		"name": "Task2",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-02-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow2",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-02-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
}]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/window/{id}" method="GET" resourcePath="/window/" id="db7997cb-99a5-4fb8-8583-7c274a5fb92e"><con:settings/><con:defaultResponse>Window1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") && 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath



def id = requestPath.split('/')[3]
log.info "Id: " + id

log.info id.equals('1')
log.info id.equals(2)

if(!id.equals('1')&&!id.equals('2')){
	return "Bad Request"}

if (accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3")){
	if(id.equals('1')){
		return "Window1"}
	else{
		return "Window2"}
	} 
else if (accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") && id.equals('2')){
	return "Window2"
}]]></con:dispatchPath><con:response name="Forbidden" id="ea3a2674-d5c2-439d-ba65-e0e8d5706f35" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Bad Request" id="723ac913-614f-4876-8fbe-8c77b3b46bf7" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response><con:response name="Window1" id="a53fab59-dc7d-413f-9113-77a64fecf025" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id":1,
	"task": {
		"id":1,
		"name": "Task1",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-01-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow1",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-01-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
}</con:responseContent></con:response><con:response name="Window2" id="65eb8c84-f1fe-429f-aaf2-4187d5ffb6c2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id":2,
	"task": {
		"id":2,
		"name": "Task2",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-02-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow2",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-02-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/delivery" method="GET" resourcePath="/delivery" id="a57eeb9c-3689-48ff-9562-974dd0fade64"><con:settings/><con:defaultResponse>Forbidden</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}


if (accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3")){
		return "Delivery Student"
	} 
else if (accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192")){
	return "DeliveryTeacher"
}</con:dispatchPath><con:response name="Forbidden" id="72aa7fb7-da56-4c2a-ae32-93b844e7e3cb" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Bad Request" id="be393192-bdb3-4fcd-b98d-f366cd5c7814" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response><con:response name="Delivery Student" id="b70826fc-ff53-4e68-bed7-7e0db03751e9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{
		"id": 1,
		"taskDeliveryWindow": {
			"id": 1,
			"task": {
				"id": 1,
				"name": "Task1",
				"issuer": 2,
				"active": true,
				"issueDate": "2017-01-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow1",
			"issuer": 2,
			"solver": 1,
			"active": true,
			"issueDate": "2017-01-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
		"solution": "http://example.com/solution1.doc",
		"deliveryDate": "2017-10-12",
		"deliveryUser": 1,
		"valid": false
	},
	{
		"id": 2,
		"taskDeliveryWindow": {
			"id": 2,
			"task": {
				"id": 2,
				"name": "Task2",
				"issuer": 2,
				"active": true,
				"issueDate": "2017-02-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow2",
			"issuer": 2,
			"solver": 1,
			"active": true,
			"issueDate": "2017-02-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
		"solution": "http://example.com/solution2.doc",
		"deliveryDate": "2017-12-12",
		"deliveryUser": 1,
		"valid": false
	},
	{
		"id": 3,
		"taskDeliveryWindow": {
			"id": 2,
			"task": {
				"id": 2,
				"name": "Task2",
				"issuer": 2,
				"active": true,
				"issueDate": "2017-02-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow2",
			"issuer": 2,
			"solver": 1,
			"active": true,
			"issueDate": "2017-02-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
		"solution": "http://example.com/solution2.doc",
		"deliveryDate": "2017-13-12",
		"deliveryUser": 1,
		"valid": true,
		"acceptanceDate": "2017-15-12",
		"acceptanceUser": 2,
		"acceptanceMessage": "Ok 9/10",
		"acceptanceBinary": "http://example.com/acceptance1.doc",
		"acceptation": true
	}
]</con:responseContent></con:response><con:response name="DeliveryTeacher" id="b1c686d1-bce1-46a1-bce1-f16e115463c3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{
		"id": 2,
		"taskDeliveryWindow": {
			"id": 2,
			"task": {
				"id": 2,
				"name": "Task2",
				"issuer": 2,
				"active": true,
				"issueDate": "2017-02-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow2",
			"issuer": 2,
			"solver": 1,
			"active": true,
			"issueDate": "2017-02-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
		"solution": "http://example.com/solution2.doc",
		"deliveryDate": "2017-12-12",
		"deliveryUser": 1,
		"valid": false
	},
	{
		"id": 3,
		"taskDeliveryWindow": {
			"id": 2,
			"task": {
				"id": 2,
				"name": "Task2",
				"issuer": 2,
				"active": true,
				"issueDate": "2017-02-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow2",
			"issuer": 2,
			"solver": 1,
			"active": true,
			"issueDate": "2017-02-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
		"solution": "http://example.com/solution2.doc",
		"deliveryDate": "2017-13-12",
		"deliveryUser": 1,
		"valid": true,
		"acceptanceDate": "2017-15-12",
		"acceptanceUser": 2,
		"acceptanceMessage": "Ok 9/10",
		"acceptanceBinary": "http://example.com/acceptance1.doc",
		"acceptation": true
	}
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/delivery/{id}" method="GET" resourcePath="/delivery/" id="8815e3cb-882a-4e34-8f64-ab4f9b70ad16"><con:settings/><con:defaultResponse>Forbidden</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") && 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}


// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath



def id = requestPath.split('/')[3]
log.info "Id: " + id

if(!id.equals('1')&&!id.equals('2')&&!id.equals('3')){
	return "Bad Request"}

if (accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3")){
	if(id.equals('1')){
		return "Delivery1"}
	else if(id.equals('2')){
		return 'Delivery2'}
	else{
		return 'Delivery3'}
	} 
else if (accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") && !id.equals('1')){
	 if(id.equals('2')){
		return 'Delivery2'}
	else{
		return 'Delivery3'}
}]]></con:dispatchPath><con:response name="Forbidden" id="4bd36607-f58f-46a7-a1e4-6d9259e5c6c0" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Delivery1" id="ed332b7a-fa4a-4221-8282-585bbee28447" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id":1,
"taskDeliveryWindow":{
			"id":1,
			"task": {
				"id":1,
				"name": "Task1",
				"issuer": 2,
				"active":true,
				"issueDate": "2017-01-12",
				"definition": "Task definition"
			},
			"name": "TaskWindow1",
			"issuer": 2,
			"solver": 1,
			"active":true,
			"issueDate": "2017-01-12",
			"startDate": "2017-02-12",
			"deadlineDate": "2017-24-12",
			"definition": "Task Window definition"
		},
"solution": "http://example.com/solution1.doc",
"deliveryDate": "2017-10-12",
"deliveryUser": 1,
"valid": false
}</con:responseContent></con:response><con:response name="Delivery2" id="80f2695c-17cb-4772-acda-8e889e99bea0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id":2,
"taskDeliveryWindow":{
	"id":2,
	"task": {
		"id":2,
		"name": "Task2",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-02-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow2",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-02-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
},
"solution": "http://example.com/solution2.doc",
"deliveryDate": "2017-12-12",
"deliveryUser": 1,
"valid": false
}</con:responseContent></con:response><con:response name="Delivery3" id="92e87814-9412-4a20-bb0d-cf8f0dfdf862" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id":3,
"taskDeliveryWindow":{
	"id":2,
	"task": {
		"id":2,
		"name": "Task2",
		"issuer": 2,
		"active":true,
		"issueDate": "2017-02-12",
		"definition": "Task definition"
	},
	"name": "TaskWindow2",
	"issuer": 2,
	"solver": 1,
	"active":true,
	"issueDate": "2017-02-12",
	"startDate": "2017-02-12",
	"deadlineDate": "2017-24-12",
	"definition": "Task Window definition"
	},
"solution": "http://example.com/solution2.doc",
"deliveryDate": "2017-13-12",
"deliveryUser": 1,
"valid": true,
"acceptanceDate":"2017-15-12",
"acceptanceUser": 2,
"acceptanceMessage": "Ok 9/10",
"acceptanceBinary":"http://example.com/acceptance1.doc",
"acceptation": true
}</con:responseContent></con:response><con:response name="Bad Request" id="484b45c9-3903-4fba-87b7-0fa9c122d8ca" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/delivery" method="POST" resourcePath="/delivery" id="4b14af0d-045c-4f03-b540-ef01e3e960a1"><con:settings/><con:defaultResponse>Forbidden</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") && 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody


if( requestBody.contains("taskDeliveryWindow") &&  requestBody.contains("solution") && requestBody.contains("deliveryDate"))
{
    // return the name of the response you want to dispatch
    return "Accepted"
}
else{
	return "Bad Request"}

]]></con:dispatchPath><con:response name="Forbidden" id="1d01f57b-bb03-4770-9738-941ede2078a9" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Accepted" id="7eecf90b-ff5e-4375-877b-4cc29aad02ed" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{
"status": "OK",
"id":4
}</con:responseContent></con:response><con:response name="Bad Request" id="9ed9976e-5a5f-446a-ac3e-3f595b829e4c" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/delivery/{id}" method="PUT" resourcePath="/delivery/" id="6d4cb0ff-8af2-4881-9dab-ced9fc3a2403"><con:settings/><con:defaultResponse>Bad Request</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") && 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath


def id = requestPath.split('/')[3]
log.info "Id: " + id

if(!id.equals('1')&&!id.equals('2')&&!id.equals('3')){
	return "Bad Request"}

if (accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3")){
	if(id.equals('1') && requestBody.contains("valid")){
		return "Ok Student"}
	else{
		return "Bad Request"} 
	}
else if (accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") && !id.equals('1')){
	if(id.equals('3') && requestBody.contains("acceptation")){
		return "Ok Teacher"}
	else{
		return "Bad Request"} 
}]]></con:dispatchPath><con:response name="Forbidden" id="6fb47c8d-6f8b-46a3-93ef-6f254222b08f" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Ok Student" id="e56774e9-3e09-4cef-9efc-9f4cc198e8a1" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Ok Teacher" id="e2f867a9-2749-41bb-a34d-fb9a2437ce33" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Bad Request" id="c8d24665-9b86-424a-ae1a-1dafb6d9a655" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/user/{id}" method="GET" resourcePath="/user/" id="9424a14f-5e9b-4840-aacd-26fa6f3b0bd0"><con:settings/><con:defaultResponse>Student</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath


def id = requestPath.split('/')[3]
log.info "Id: " + id

if (id.equals("1")) {
	return "Student"
} else if (id.equals("2")) {
	return "Teacher"
} else {
	return "Bad Request"
}</con:dispatchPath><con:response name="Student" id="4d4d0ad7-838b-4592-aa94-49ad061743d7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"userName": "student",
"firstName": "Chuck",
"lastName": "Norris",
"email": "student@test.com",
"role": "Student",
"groups": [{"id":1, "name":"g1"}, {"id":2, "name":"g2"}]
}</con:responseContent></con:response><con:response name="Teacher" id="727efb76-9dad-4425-a48e-2f8add0101a5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
"userName": "teacher",
"firstName": "Albert",
"lastName": "Einstein",
"email": "teacher@test.com",
"role": "Teacher"
}</con:responseContent></con:response><con:response name="Forbidden" id="7fa6f6de-5fdd-4e41-a810-ed0808e50c97" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response><con:response name="Bad Request" id="b974cd8f-320b-4da6-8e87-b4aac78e4f61" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"ERROR",
	"message": "BAD_REQUEST"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/task" method="GET" resourcePath="/task" id="fc07adcf-1ab4-41fe-861a-b6fff1859cc2"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>//check session token
def accessToken = mockRequest.getRequestHeaders()["Session-Id"][0]

log.info "Access Token: "+ accessToken

if (!accessToken.equals("0dc1f6e1-c7f1-41ac-8ce2-32b6b3e57aa3") &amp;&amp; 
	!accessToken.equals("121555e8-ff98-4dcc-a1ad-e7f06e674192") ){
	return "Forbidden"
}

return "Success"
</con:dispatchPath><con:response name="Success" id="17d3b5a2-a097-4017-ba33-6c8cc07bac4e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
{
"id":1,
"name": "Task1",
"issuer": 2,
"active":true,
"issueDate": "2017-01-12",
"definition": "Task definition"
},
{
"id":2,
"name": "Task2",
"issuer": 2,
"issueDate": "2017-02-12",
"active":false,
"definition": "Task definition"
},
{
"id":3,
"name": "Task3",
"issuer": 2,
"issueDate": "2017-03-12",
"active":true,
"definition": "Task definition"
}
]</con:responseContent></con:response><con:response name="Forbidden" id="b5f9388b-5bdf-4175-8702-e354d065913b" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ERROR",
"message": "NOT_AUTHORIZED"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>